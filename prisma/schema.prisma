datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int                    @id @default(autoincrement())
  address            String
  isBadgeHolder      Int
  created_at         DateTime               @default(now())
  projectVotes       Vote[]
  expertiseVotes     ExpertiseVote[]
  nonce              Nonce?
  finishedCollection UserCollectionFinish[]
  shares             Share[]
  attestations       UserAttestation[]
}

model Space {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  created_at  DateTime @default(now())
  polls       Poll[]
}

enum PollStatus {
  ACTIVE
  CLOSED
}

model Poll {
  id         Int        @id @default(autoincrement())
  title      String
  space_id   Int
  status     PollStatus @default(ACTIVE)
  ends_at    DateTime
  created_at DateTime   @default(now())
  space      Space      @relation(fields: [space_id], references: [id])
  projects   Project[]
}

enum ProjectType {
  collection
  composite_project
  project
}

model Project {
  id                      Int                    @id @default(autoincrement())
  name                    String
  poll_id                 Int
  url                     String?
  impactDescription       String
  contributionDescription String?
  RPGF3Id                 String?
  parentId                Int?
  image                   String?
  metadataUrl             String?
  created_at              DateTime               @default(now())
  parent                  Project?               @relation("ParentRelation", fields: [parentId], references: [id])
  children                Project[]              @relation("ParentRelation")
  type                    ProjectType
  poll                    Poll                   @relation(fields: [poll_id], references: [id])
  options1                Vote[]                 @relation("VoteToProject1")
  options2                Vote[]                 @relation("VoteToProject2")
  voted                   Vote[]                 @relation("Voted")
  shares                  Share[]
  expertiseColleciton1    ExpertiseVote[]        @relation("ExpertiseVote1")
  expertiseColleciton2    ExpertiseVote[]        @relation("ExpertiseVote2")
  expertiseVoted          ExpertiseVote[]        @relation("Voted")
  finishedCollections     UserCollectionFinish[]
  attestations            UserAttestation[]
}

model Vote {
  id          Int      @id @default(autoincrement())
  user_id     Int
  project1_id Int
  project2_id Int
  picked_id   Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id])
  project1    Project  @relation("VoteToProject1", fields: [project1_id], references: [id])
  project2    Project  @relation("VoteToProject2", fields: [project2_id], references: [id])
  picked      Project? @relation("Voted", fields: [picked_id], references: [id])

  @@unique([project1_id, project2_id, user_id])
}

model ExpertiseVote {
  id             Int      @id @default(autoincrement())
  user_id        Int
  collection1_id Int
  collection2_id Int
  picked_id      Int?
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())
  user           User     @relation(fields: [user_id], references: [id])
  collection1    Project  @relation("ExpertiseVote1", fields: [collection1_id], references: [id])
  collection2    Project  @relation("ExpertiseVote2", fields: [collection2_id], references: [id])
  picked         Project? @relation("Voted", fields: [picked_id], references: [id])

  @@unique([collection1_id, collection2_id, user_id])
}

model Nonce {
  id         Int      @id @default(autoincrement())
  user_id    Int?     @unique()
  nonce      String
  expires_at String
  created_at DateTime @default(now())
  user       User?    @relation(fields: [user_id], references: [id])
}

model Share {
  user_id    Int
  project_id Int
  share      Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  project    Project  @relation(fields: [project_id], references: [id])

  @@id([user_id, project_id])
}

model UserCollectionFinish {
  user_id       Int
  collection_id Int
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id])
  collection    Project  @relation(fields: [collection_id], references: [id])

  @@id([user_id, collection_id])
}

model UserAttestation {
  user_id       Int
  collection_id Int
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id])
  collection    Project  @relation(fields: [collection_id], references: [id])

  @@id([user_id, collection_id])
}
