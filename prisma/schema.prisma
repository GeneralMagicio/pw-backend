datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int                      @id @default(autoincrement())
  address            String                   @unique()
  opAddress          String?                  @unique() @map("op_address")
  isBadgeHolder      Int                      @map("is_badgeholder")
  createdAt          DateTime                 @default(now()) @map("created_at")
  updatedAt          DateTime                 @default(now()) @updatedAt @map("updated_at")
  identity           Json? // Ideally should be unique except {} and null values but Prisma doesn't support partial
  // unique constraints
  badges             Json?
  projectVotes       Vote[]
  nonce              Nonce?
  finishedCollection UserCollectionFinish[]
  ranks              Rank[]
  projectStars       ProjectStar[]
}

model Space {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  polls       Poll[]
}

enum PollStatus {
  ACTIVE
  CLOSED
}

model Poll {
  id        Int        @id @default(autoincrement())
  title     String
  spaceId   Int        @map("space_id")
  status    PollStatus @default(ACTIVE)
  endsAt    DateTime   @map("ends_at")
  createdAt DateTime   @default(now()) @map("created_at")
  space     Space      @relation(fields: [spaceId], references: [id])
  projects  Project[]
}

enum ProjectType {
  collection
  compositeProject
  project
}

model Project {
  id                      Int                      @id @default(autoincrement())
  name                    String
  pollId                  Int                      @map("poll_id")
  url                     String?
  impactDescription       String                   @map("impact_description")
  contributionDescription String?                  @map("contribution_description")
  shortDescription        String?                  @map("short_description")
  RPGF4Id                 String?                  @map("rpgf4_id")
  parentId                Int?                     @map("parent_id")
  image                   String?
  metadataUrl             String?                  @map("metadata_url")
  metricsProjectId        String?                  @map("metrics_project_id")
  createdAt               DateTime                 @default(now()) @map("created_at")
  parent                  Project?                 @relation("ParentRelation", fields: [parentId], references: [id])
  children                Project[]                @relation("ParentRelation")
  type                    ProjectType
  poll                    Poll                     @relation(fields: [pollId], references: [id])
  options1                Vote[]                   @relation("VoteToProject1")
  options2                Vote[]                   @relation("VoteToProject2")
  voted                   Vote[]                   @relation("Voted")
  ranks                   Rank[]
  finishedCollections     UserCollectionFinish[]
  stars                   ProjectStar[]
}

model Vote {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  project1Id Int      @map("project1_id")
  project2Id Int      @map("project2_id")
  pickedId   Int?     @map("picked_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id])
  project1   Project  @relation("VoteToProject1", fields: [project1Id], references: [id])
  project2   Project  @relation("VoteToProject2", fields: [project2Id], references: [id])
  picked     Project? @relation("Voted", fields: [pickedId], references: [id])

  @@unique([project1Id, project2Id, userId])
}

model Nonce {
  id        Int      @id @default(autoincrement())
  userId    Int?     @unique() @map("user_id")
  nonce     String
  expiresAt String   @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id])
}

// model Otp {
//   userId    Int      @unique() @map("user_id")
//   otp       String
//   expiresAt String   @map("expires_at")
//   createdAt DateTime @default(now()) @map("created_at")
//   user      User     @relation(fields: [userId], references: [id])

//   @@id([userId, otp])
// }

// model Share {
//   userId    Int      @map("user_id")
//   projectId Int      @map("project_id")
//   share     Float // the percentage of allocation from the 100% available to all projects
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @default(now()) @map("updated_at")
//   user      User     @relation(fields: [userId], references: [id])
//   project   Project  @relation(fields: [projectId], references: [id])

//   @@id([userId, projectId])
// }

model Rank {
  userId    Int      @map("user_id")
  projectId Int      @map("project_id")
  rank      Int? // the rank of a project in a category (rank = 1 is the best, etc)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
  @@unique([userId, projectId, rank])
}

model ProjectStar {
  userId    Int      @map("user_id")
  projectId Int      @map("project_id")
  star      Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

// model UserCollectionFiltered {
//   userId       Int      @map("user_id")
//   collectionId Int      @map("collection_id")
//   createdAt    DateTime @default(now()) @map("created_at")
//   updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
//   user         User     @relation(fields: [userId], references: [id])
//   collection   Project  @relation(fields: [collectionId], references: [id])

//   @@id([userId, collectionId])
// }

model UserCollectionFinish {
  userId       Int      @map("user_id")
  collectionId Int      @map("collection_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])
  collection   Project  @relation(fields: [collectionId], references: [id])

  @@id([userId, collectionId])
}

// model UserAttestation {
//   userId       Int      @map("user_id")
//   collectionId Int      @map("collection_id")
//   createdAt    DateTime @default(now()) @map("created_at")
//   updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
//   user         User     @relation(fields: [userId], references: [id])
//   collection   Project  @relation(fields: [collectionId], references: [id])

//   @@id([userId, collectionId])
// }
